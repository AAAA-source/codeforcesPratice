想法：這題蘊含dp思維，可以把「是否能達到該點」作為dp紀錄，接著處理從(1 , 1)開始的每一步
只需處理原本能達到的點即可

#include<stdio.h>
#include<stdbool.h>
#include<limits.h>
#include<stdlib.h>


int main(void)
{
    int t ;
    scanf("%d" , &t) ;
    while (t--) {
        int n ;
        scanf("%d" , &n) ;
        
        char move[3][n + 5] ;
        
        scanf("%s" , &(move[1][1]) ) ;
        scanf("%s" , &(move[2][1]) ) ;
        
        bool dp[3][n + 5] ;
        for(int i = 1 ; i <= 2 ; i++) {
            for(int j = 1 ; j <= n ; j++)
                dp[i][j] = false ;
        }
        
        dp[1][1] = true ;
        for(int j = 1 ; j <= n ; j++) {
            for(int i = 1 ; i <= 2 ; i++) {
                if ( dp[i][j] == false )
                    continue ;
                
                if ( i == 1 ) {
                    // down
                    if ( move[i + 1][j] == '>' ) {
                        if ( j < n )
                            dp[i + 1][j + 1] = true ;
                    }
                    else {
                        if ( j > 1 )
                            dp[i + 1][j - 1] = true ;
                    }
                }
                else {
                    // up
                    if ( move[i - 1][j] == '>' ) {
                        if ( j < n )
                            dp[i - 1][j + 1] = true ;
                    }
                    else {
                        if ( j > 1 )
                            dp[i - 1][j - 1] = true ;
                    }
                    
                }
                
                // right
                if ( j < n ) {
                    if ( move[i][j + 1] == '>' ) {
                        if ( j + 1 < n )
                            dp[i][j + 2] = true ;
                    }
                }
            }
        }
        
        if ( dp[2][n] )
            printf("YES\n") ;
        else
            printf("NO\n") ;
        
    }
    
    return 0 ;
}
