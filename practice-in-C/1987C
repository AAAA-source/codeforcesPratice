想法：考慮i-th 元素，如果不大於後一個元素的話，就需要後一個元素的次數加一次才能變成0
而如果比後一個元素大，則是該元素大小就是所需次數；如此疊加到第一個元素即可求解

#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

long long int max(long long int a , long long int b)
{
    return ( a > b )? a : b ;
}

int main(void)
{
    int t ;
    scanf("%d" , &t) ;
    
    while (t-- ) {
        int n ;
        scanf("%d" , &n ) ;
        
        long long int array[n + 5] ;
        for(int i = 1 ; i <= n ; i++)
            scanf("%lld" , &(array[i]) ) ;
        
        
        long long int dp[n + 5] ;
        dp[n] = array[n] ;
        
        for(int i = n - 1 ; i >= 1 ; i--) {
            dp[i] = max( dp[i + 1] + 1 , array[i] ) ;
            
        }
        
        
        printf("%lld\n" , dp[1]) ;
    }
        
    return 0 ;
}
