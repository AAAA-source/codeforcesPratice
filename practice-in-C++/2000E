想法：只要先記算出每個格子會被拍照幾次，再把最大數值的元素安排到拍照最多次的格子，依序遞減

#include<iostream>
#include<vector>
#include<string>
#include<unordered_map>
#include<map>
#include<set>
#include<unordered_set>
#include<algorithm>
#include<stdexcept>
#include<cmath>
#include<utility>

using std::cin ;
using std::cout ;
using std::endl ;
using std::vector ;
using std::string ;
using std::unordered_map ;
using std::unordered_set ;
using std::pair ;
using std::max ;
using std::min ;
using std::sort ;

int main(void)
{
    int t ;
    cin >> t ;
    
    while (t--) {
        long long int n , m , k , w ;
        cin >> n >> m >> k >> w ;
        
        vector<long long int> array(w) ;
        for( int i = 0 ; i < w ; i++)
            cin >> array[i] ;
        
        vector<long long int> count ;
        vector<long long int> row_count(n) , column_count(m) ;
        
        long long int now = 1 ;
        for( int i = 0 ; i < (n + 1) / 2 ; i++) {
            if ( row_count[i] == 0 )
                row_count[i] = now ;
            if ( row_count[n - 1 - i] == 0 )
                row_count[n - 1 - i] = now ;
            if ( i + k < n )
                now = min(k , now + 1) ;
        }
        now = 1 ;
        for( int i = 0 ; i < (m + 1) / 2 ; i++) {
            if ( column_count[i] == 0 )
                column_count[i] = now ;
            if ( column_count[m - 1 - i] == 0 )
                column_count[m - 1 - i] = now ;
            if (i + k < m)
                now = min(k , now + 1) ;
        }
        
        for(int i = 0 ; i < n ; i++)
            for(int j = 0 ; j < m ; j++) {
                count.push_back(row_count[i] * column_count[j]) ;
                //cout << "input " << count.back() << endl ;
            }
        
        
        sort( count.begin() , count.end() , std::greater<long long int>() ) ;
        sort( array.begin() , array.end() , std::greater<long long int>() ) ;
        
        long long int sum = 0 ;
        for( int i = 0 ; i < w ; i++ )
            sum += array[i] * count[i] ;
        
        cout << sum << endl ;
    }
    
    
    return 0 ;
}
