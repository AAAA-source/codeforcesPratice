想法：先算出prefix sum ，然後用 binary search 去找出不同的pile
每次問l ... m pile ，如果沒有特殊石頭的話就會等於 prefix sum[m] - prefix[l - 1] 

#include<iostream>
#include<vector>
#include<string>
#include<unordered_map>
#include<map>
#include<set>
#include<unordered_set>
#include<algorithm>
#include<stdexcept>

using std::cin ;
using std::cout ;
using std::endl ;
using std::vector ;
using std::string ;
using std::unordered_map ;
using std::unordered_set ;


int main(void)
{
    int t ;
    cin >> t ;
    while ( t-- ) {
        int n ;
        cin >> n ;
        vector<int> a ;
        a.push_back(0) ;
        for(int i = 0 ; i < n ; i++) {
            int temp ;
            cin >> temp ;
            a.push_back(temp) ;
        }
        
        vector<int> suma ;
        suma.push_back(0) ;
        for(int i = 1 ; i < n ; i++)
            suma.push_back(suma[i - 1] + a[i] ) ;
        
        int r = n ;
        int l = 1 ;
        while ( l < r ) {
            int m = (l + r ) / 2 ;
            cout << "? " <<m - l + 1 ;
            cout.flush() ;
            for(int i = l ; i <= m ; i++) {
                cout << " " << i ;
                cout.flush() ;
            }
            cout << endl ;
            
            int ans ;
            cin >> ans ;
            if ( ans == suma[m] - suma[l - 1] )
                l = m + 1 ;
            else
                r = m ;
        }
        cout << "! " << r << endl ;
        cout.flush() ;
    }
    
    
    
    return 0 ;
}
