想法：先判斷是否已經達成，如果沒有的話只有可能將所有元素轉乘奇數；所以先把偶數記錄下來，並記錄最大奇數
如果偶數比最大奇數小：只需執行一次operation，且最大奇數加上偶數
反之，如果所有比最大奇數小的偶數相加最大奇數，還是有大偶數的話，就需要執行兩次operation
(挑最大的偶數執行，使得其餘偶數皆只要一次operaiton)


#include<iostream>
#include<vector>
#include<string>
#include<algorithm>

using std::cin ;
using std::cout ;
using std::endl ;
using std::vector ;
using std::string ;

bool all_same( vector<long long int> *a )
{
    vector<long long int> &array = *a ;
    for(int i = 0 ; i < array.size() ; i++) {
        if ( array[i] % 2 != array[0] % 2  )
            return false ;
    }
    
    return true ;
}

int main(void)
{
    int t ;
    cin >> t ;
    
    while( t-- ) {
        int n ;
        cin >> n ;
        
        vector<long long int> array(n) ;
        for(int i = 0 ; i < n ; i++)
            cin >> array[i] ;
        
        if (all_same(&array) ) {
            cout << 0 << endl ;
            continue ;
        }
        
        long long int max_odd = -1 ;
        vector<long long int> even ;
        for(int i = 0 ; i < n ; i++) {
            if ( array[i] & 1 ) {
                max_odd = std::max( max_odd , array[i] ) ;
            }
            else
                even.push_back(array[i]) ;
        }
        
        std::sort(even.begin() , even.end() ) ;
        int count = 0 ;
        for(int i = 0 ; i < even.size() ; i++) {
            if ( i == even.size() - 1 ) {
                count += ( (max_odd < even[i])? 2 : 1 ) ;
            }
            else if ( even[i] < max_odd ) {
                ++count ;
                max_odd += even[i] ;
            }
            else {
                count += 3 ;
                max_odd += even[ even.size() - 1 ] ;
                even.pop_back() ;
            }
        }
        
        cout << count << endl ;
    }
        
    
    
    
    return 0 ;
}
